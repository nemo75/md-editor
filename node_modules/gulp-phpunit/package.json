{
  "_args": [
    [
      "gulp-phpunit@https://registry.npmjs.org/gulp-phpunit/-/gulp-phpunit-0.11.3.tgz",
      "/home/skynet/Documents/dev/examen/react-elixired"
    ]
  ],
  "_from": "gulp-phpunit@>=0.11.0 <0.12.0",
  "_id": "gulp-phpunit@0.11.3",
  "_inCache": true,
  "_location": "/gulp-phpunit",
  "_phantomChildren": {
    "cli-usage": "0.1.2",
    "clone-stats": "0.0.1",
    "core-util-is": "1.0.2",
    "dateformat": "1.0.12",
    "escape-string-regexp": "1.0.5",
    "growly": "1.3.0",
    "inherits": "2.0.1",
    "isarray": "0.0.1",
    "lodash._arraycopy": "3.0.0",
    "lodash._arrayeach": "3.0.0",
    "lodash._baseassign": "3.2.0",
    "lodash._basefor": "3.0.3",
    "lodash._bindcallback": "3.0.1",
    "lodash._escapehtmlchar": "2.4.1",
    "lodash._escapestringchar": "2.4.1",
    "lodash._getnative": "3.9.1",
    "lodash._isnative": "2.4.1",
    "lodash._objecttypes": "2.4.1",
    "lodash._reunescapedhtml": "2.4.1",
    "lodash._shimkeys": "2.4.1",
    "lodash.isarguments": "3.0.8",
    "lodash.isarray": "3.0.4",
    "lodash.isobject": "2.4.1",
    "lodash.values": "2.4.1",
    "multipipe": "0.1.2",
    "semver": "4.3.6",
    "shellwords": "0.1.0",
    "string_decoder": "0.10.31",
    "which": "1.2.4"
  },
  "_requested": {
    "name": "gulp-phpunit",
    "raw": "gulp-phpunit@https://registry.npmjs.org/gulp-phpunit/-/gulp-phpunit-0.11.3.tgz",
    "rawSpec": "https://registry.npmjs.org/gulp-phpunit/-/gulp-phpunit-0.11.3.tgz",
    "scope": null,
    "spec": "https://registry.npmjs.org/gulp-phpunit/-/gulp-phpunit-0.11.3.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/laravel-elixir"
  ],
  "_resolved": "https://registry.npmjs.org/gulp-phpunit/-/gulp-phpunit-0.11.3.tgz",
  "_shasum": "fb3bb6d305e5c0ad47190871b172352b9a3fdb26",
  "_shrinkwrap": null,
  "_spec": "gulp-phpunit@https://registry.npmjs.org/gulp-phpunit/-/gulp-phpunit-0.11.3.tgz",
  "_where": "/home/skynet/Documents/dev/examen/react-elixired",
  "author": {
    "email": "codedungeon@gmail.com",
    "name": "Mike Erickson"
  },
  "bugs": {
    "url": "https://github.com/mikeerickson/gulp-phpunit/issues"
  },
  "dependencies": {
    "chalk": "^1.0.0",
    "gulp-messenger": "0.7.0",
    "gulp-notify": "^2.2.0",
    "gulp-util": "~2.2.14",
    "lodash": "3.10.1",
    "map-stream": "~0.0.4",
    "node-notifier": "4.3.1"
  },
  "description": "PHPUnit plugin for Gulp",
  "devDependencies": {
    "gulp": "^3.8.0",
    "gulp-mocha": "^0.5.2",
    "gulp-shell": "^0.2.9",
    "jshint": "^2.5.3",
    "mocha": "^1.21.4",
    "should": "^4.0.4"
  },
  "engines": {
    "node": ">=0.10.0"
  },
  "homepage": "https://github.com/mikeerickson/gulp-phpunit#readme",
  "keywords": [
    "gulpplugin",
    "phpunit"
  ],
  "license": "MIT",
  "main": "index.js",
  "name": "gulp-phpunit",
  "optionalDependencies": {},
  "readme": "# gulp-phpunit\nPHPUnit plugin for gulp 3\n\n## Installation\n\nFirst, install `gulp-phpunit` as a development dependency:\n\n```shell\nnpm install --save-dev gulp-phpunit\n```\n\n#### Laravel Elixir Users\nIf you are using with laravel-elixir, as of this update it is forcing use of 0.9.0, but we now have stable branches at 0.10.0 and 0.11.0\n\n```shell\n$ cd node_modules/laravel-elixir\n$ npm install -S gulp-phpunit@latest\n```\n\n#### Laravel Elixir Duplicate Notifications\nAs of this release, the current version of Elixir 4.0.x, notification messages are used throughout Elixir operation, thus you may want to disable gulp-phpunit default !notifications\nThis can be done using the optional `options` passed to mix.phpUnit as follows (for more information about available gulp-phpunit options, please refer to descriptions below)\n\n````\nelixir(function(mix) {\n  mix.phpUnit('',{notify: false}); // this will disable gulp-phpUnit internal notifications\n});\n````\n\n## Usage\n\nAfter you have installed plugin, reference in to your `gulpfile.js`:\n\n```javascript\nvar phpunit = require('gulp-phpunit');\n\n// option 1: default format, equivelant to using `phpunit` in command line (no options)\n\nvar gulp    = require('gulp');\nvar phpunit = require('gulp-phpunit');\n\ngulp.task('phpunit', function() {\n  gulp.src('')\n    .pipe(phpunit());\n});\n```\n\n// option 2: with defined bin and options\n\nvar gulp    = require('gulp');\nvar phpunit = require('gulp-phpunit');\n\ngulp.task('phpunit', function() {\n  var options = {debug: false};\n  gulp.src('phpunit.xml')\n    .pipe(phpunit('./vendor/bin/phpunit',options));\n});\n\n// option 3: with custom options, using separate configuration file, disabling status line\n\nvar gulp    = require('gulp');\nvar phpunit = require('gulp-phpunit');\n\ngulp.task('phpunit', function() {\n  var options = {\n    debug:             true,\n    statusLine:        false,\n    configurationFile: './test.xml'\n  };\n  gulp.src('phpunit.xml')\n    .pipe(phpunit('./vendor/bin/phpunit', options));\n});\n\n\n// Note: Windows OS may require double backslashes if using other than default location (option 1)\ngulp.task('phpunit', function() {\n  gulp.src('phpunit.xml')\n    .pipe(phpunit('.\\\\path\\\\to\\\\phpunit'));\n});\n\n\n\n\n```\n\n## API\n\n### phpunit(phpunitpath,options)\n\n#### phpunitpath\n\nType: `String`\n\nThe path to the desired PHPUnit binary\n- If not supplied, the default path will be `./vendor/bin/phpunit`\n\n#### options.debug\nType:    `Boolean`\nDefault: `false`\n\nDebug mode enabled (enables --debug switch as well)\n\n#### options.clear\nType:    `Boolean`\nDefault: `false`\n\nClear console before executing command\n\n#### options.dryRun\nType:    `Boolean`\nDefault: `false`\n\nExecutes dry run (doesn't actually execute tests, just echo command that would be executed)\n\n#### options.notify\nType:    `Boolean`\nDefault: `true`\n\nConditionally display notification (both console and growl where applicable)\n\n#### options.statusLine\nType:    `Boolean`\nDefault: `true`\n\nDisplays status lines as follows\n\n  - green for passing tests\n  - red for failing tests\n  - yellow for tests which have `debug` property enabled (will also display red, green status)\n\n\n\n### PHPUnit Options\n\nIn addition to plugin options, the following PHPUnit specific options may be configured.  For more information (and default values), visit the help supplied by PHPUnit\n\n$ phpunit --help \n\n#### options.testClass\nType: `String`\n\nDefine a specific class for testing (supply full path to test class)\n\n#### options.testSuite\nType: `String`\n\nDefine a specific test suite for testing (supply full path to test suite)\n\n#### options.configurationFile\nType: `String`\n\nDefine a path to an xml configuration file (supply full path and filename)\n\n  - If `.xml` file supplied as task source, it will be used as configuration file\n  - If `configurationFile` property supplied in options, it will be used as configuration file\n  - If you enable `noConfigurationFile` property, no configuration file will be used\n\n\n\n## Code Coverage Options:\n\nCall user supplied callback to handle notification\n\n#### options.coverageClover\nType: `String`\n\nGenerate code coverage report in Clover XML format.\n\n#### options.coverageCrap4j\nType: `String`\n\nGenerate code coverage report in Crap4J XML format.\n\n#### options.coverageHtml\nType: `String`\n\nGenerate code coverage report in HTML format.\n\n#### options.coveragePhp\nType: `String`\n\nExport PHP_CodeCoverage object to file.\n\n#### options.coverageText\nType: `String`\n\nGenerate code coverage report in text format.\n-- Default: Standard output.\n\n#### options.coverageXml\nType: `String`\n\nGenerate code coverage report in PHPUnit XML format.\n\n\n## Logging Options:\n\n#### options.logJunit\nType: `String`\n\nLog test execution in JUnit XML format to file.\n\n#### options.logTap\nType: `String`\n\nLog test execution in TAP format to file.\n\n#### options.logJson\nType: `String`\n\nLog test execution in JSON format.\n\n#### options.testdoxHtml\nType: `String`\n\nWrite agile documentation in HTML format to file.\n\n#### options.testdoxText\nType: `String`\n\nWrite agile documentation in Text format to file.\n\n## Test Selection Options:\n\n#### options.filter (pattern)\nType: `String`\n\nFilter which tests to run.\n\n#### options.testSuite (pattern)\nType: `String`\n\nFilter which testsuite to run.\n\n#### options.group (pattern)\nType: `String`\n\nOnly runs tests from the specified group(s).\n\n#### options.excludeGroup\nType: `String`\n\nExclude tests from the specified group(s).\n\n#### options.listGroups\nType: `String`\n\nList available test groups.\n\n#### options.testSuffix\nType: `String`\n\nOnly search for test in files with specified suffix(es). Default: Test.php,.phpt\n\n## Test Execution Options:\n\n#### options.reportUselessTests\nType: `String`\n\nBe strict about tests that do not test anything.\n\n#### options.strictCoverage (default: false)\nType: `Boolean`\n\nBe strict about unintentionally covered code.\n\n#### options.disallowTestOutput (default: false)\nType: `Boolean`\n\nBe strict about output during tests.\n\n#### options.enforceTimeLimit (default: false)\nType: `Boolean`\n\nEnforce time limit based on test size.\n\n#### options.disallowTodoTests (default: false)\nType: `Boolean`\n\nDisallow @todo-annotated tests.\n\n#### options.strict (default: false)\nType: `Boolean`\n\nRun tests in strict mode (enables all of the above).\n\n#### options.processIsolation (default: false)\nType: `Boolean`\n\nRun each test in a separate PHP process.\n\n#### options.noGlobalsBackup (default: false)\nType: `Boolean`\n\nDo not backup and restore $GLOBALS for each test.\n\n#### options.staticBackup (default: false)\nType: `Boolean`\n\nBackup and restore static attributes for each test.\n\n#### options.colors (default: true)\nType:    `String`\nDefault: `always` \n\nUse colors in output (\"never\", \"auto\" or \"always\").\n\n#### options.stderr (default: false)\nType: `Boolean`\n\nWrite to STDERR instead of STDOUT.\n\n#### options.stopOnError (default: false)\nType: `Boolean`\n\nStop execution upon first error.\n\n#### options.stopOnFailure (default: false)\nType: `Boolean`\n\nStop execution upon first error or failure.\n\n#### options.stopOnRisky (default: false)\nType: `Boolean`\n\nStop execution upon first risky test.\n\n#### options.stopOnIncomplete (default: false)\nType: `Boolean`\n\nStop execution upon first incomplete test.\n\n#### options.stopOnSkipped (default: false)\nType: `Boolean`\n\nStop execution upon first skipped test.\n\n#### options.loader\nType: `String`\n\nTestSuiteLoader implementation to use.\n\n#### options.repeat\nType: `Integer | String`\n\nRuns the test(s) repeatedly.\n\n#### options.tap\nType: `Boolean`\n\nReport test execution progress in TAP format.\n\n#### options.testdox\nType: `Boolean`\n\nReport test execution progress in TestDox format.\n\n#### options.printer\nType: `String`\n\nTestSuiteListener implementation to use.\n\n## Configuration Options\n\n#### options.bootstrap\nType: `String`\n\nA \"bootstrap\" PHP file that is run before the tests.\n\n#### options.configurationFile\nType: `String`\n\nRead configuration from XML file.\n\n#### options.noConfiguration\nType: `Boolean`\n\nIgnore default configuration file (phpunit.xml).\n\n#### options.includePath\nType: `Boolean`\n\nPrepend PHP's include_path with given path(s).\n\n\n\n## Credits\n\ngulp-phpunit written by Mike Erickson\n\nE-Mail: [codedungeon@gmail.com](mailto:codedungeon@gmail.com)\n\nTwitter: [@codedungeon](http://twitter.com/codedungeon)\n\nWebsite: [codedungeon.org](http://codedungeon.org)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/mikeerickson/gulp-phpunit.git"
  },
  "scripts": {
    "test": "mocha --reporter spec && jshint ./*.js && jshint ./test/*.js"
  },
  "version": "0.11.3"
}
